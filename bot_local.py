import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram import Router
from aiogram.types import Message
import asyncio
from dotenv import load_dotenv

load_dotenv()

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN_LLM_LOCAL')
if not TELEGRAM_TOKEN or TELEGRAM_TOKEN == 'None':
    raise RuntimeError('TELEGRAM_TOKEN environment variable is not set or is invalid!')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('llm_responses.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

# === –ò–ú–ü–û–†–¢–´ –î–õ–Ø –û–ë–£–ß–ï–ù–ò–Ø –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
from train_llm import train_bnb_lora
from test_llm import test_model

# –°–ø–∏—Å–æ–∫ HuggingFace –º–æ–¥–µ–ª–µ–π –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è (–±–µ–∑ GGUF)
HF_FINETUNE_MODELS = [
    'CodeLlama-7b-Instruct-hf',
    'Mistral-7B-Instruct-v0.2',
    # –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ HF-–º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
]

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∞–∑–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
BASE_MODELS = [
    'CodeLlama-7b-Instruct-hf',
    'Mistral-7B-Instruct-v0.2'
]


def get_main_kb():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º –¥–µ–π—Å—Ç–≤–∏—è"""
    buttons = ['–û–±—É—á–∏—Ç—å LLM', '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å LLM', '–ò—Å–ø—Ä–∞–≤–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å—ã']  # ‚Üê –∑–¥–µ—Å—å –∑–∞–º–µ–Ω–µ–Ω–æ
    kb = [[KeyboardButton(text=btn)] for btn in buttons]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

@router.message(lambda message: message.text == '–ò—Å–ø—Ä–∞–≤–∏—Ç—å SQL-–∑–∞–ø—Ä–æ—Å')
async def fix_sql_request(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SQL"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    set_user_state(message.from_user.id, "fix_sql")
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ SQL-–∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.\n"
        "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º."
    )

@router.message(lambda message: get_user_state(message.from_user.id) == "fix_sql")
async def handle_sql_fix_request(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞"""
    if not message.from_user or not message.text:
        await message.answer("–û—à–∏–±–∫–∞: –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π.")
        return

    raw_sql = message.text

    await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    try:
        # –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ –≤—ã–∑–æ–≤–∞ –º–æ–¥–µ–ª–∏ –∏–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        # –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –≤—ã–∑–≤–∞—Ç—å —Å–≤–æ–π LLM, –ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ —á–µ—Ä–µ–∑ API
        # –ù–∏–∂–µ ‚Äî –∑–∞–≥–ª—É—à–∫–∞
        fixed_sql = "SELECT id, name FROM users WHERE active = TRUE;"  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤—ã–∑–æ–≤ LLM

        await message.answer(
            f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å:\n```\n{fixed_sql}\n```",
            parse_mode="Markdown"
        )

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

    set_user_state(message.from_user.id, STATE_MAIN)
    await message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_kb())


def get_finetune_model_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    kb = [[KeyboardButton(text=btn)] for btn in HF_FINETUNE_MODELS]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_test_model_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    buttons = ['–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å', '–î–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å']
    kb = [[KeyboardButton(text=btn)] for btn in buttons]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_base_model_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏"""
    kb = [[KeyboardButton(text=btn)] for btn in BASE_MODELS]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def get_quant_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è"""
    kb = [[KeyboardButton(text=btn)] for btn in ['4bit', '8bit', 'fp16']]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
STATE_MAIN = "main"
STATE_TRAIN_UPLOAD_DATASET = "train_upload_dataset"
STATE_TRAIN_MODEL_CHOICE = "train_model_choice"
STATE_TRAIN_QUANT_CHOICE = "train_quant_choice"
STATE_TEST_MODEL_TYPE = "test_model_type"
STATE_TEST_BASE_MODEL_CHOICE = "test_base_model_choice"
STATE_TEST_FINETUNED_MODEL_CHOICE = "test_finetuned_model_choice"
STATE_TEST_UPLOAD_DATASET = "test_upload_dataset"
STATE_SCHEMA_UPLOAD = "schema_upload"


def set_user_state(user_id, state, **kwargs):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_states:
        user_states[user_id] = {}
    user_states[user_id]['state'] = state
    user_states[user_id].update(kwargs)


def get_user_state(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_states.get(user_id, {}).get('state', STATE_MAIN)


def get_user_data(user_id, key, default=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_states.get(user_id, {}).get(key, default)


def get_finetuned_models():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ –ø–∞–ø–æ–∫"""
    finetuned_models = []
    current_dir = os.getcwd()

    # –ò—â–µ–º –ø–∞–ø–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å "finetuned_"
    for item in os.listdir(current_dir):
        if os.path.isdir(item) and item.startswith("finetuned_"):
            finetuned_models.append(item)

    # –¢–∞–∫–∂–µ –∏—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞–ø–∫–∏ –∏–∑ train_llm.py
    for item in os.listdir(current_dir):
        if os.path.isdir(item) and "bnb-lora-finetuned" in item:
            finetuned_models.append(item)

    return finetuned_models


def get_finetuned_model_kb():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–æ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    models = get_finetuned_models()
    if not models:
        kb = [[KeyboardButton(text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")]]
    else:
        kb = [[KeyboardButton(text=model)] for model in models]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


@router.message(Command('start'))
async def send_welcome(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    set_user_state(message.from_user.id, STATE_MAIN)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_kb()
    )


@router.message(lambda message: message.text == '–û–±—É—á–∏—Ç—å LLM')
async def start_training(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è LLM"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    set_user_state(message.from_user.id, STATE_TRAIN_UPLOAD_DATASET)
    await message.answer(
        "–î–ª—è –æ–±—É—á–µ–Ω–∏—è LLM –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx).\n\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:\n"
        "- BAD_SQL: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å\n"
        "- GOOD_SQL: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å\n"
        "- REASON: –ø—Ä–∏—á–∏–Ω–∞ –æ—à–∏–±–∫–∏\n"
        "- FIX: –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞:"
    )


@router.message(lambda message: message.text == '–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å LLM')
async def start_testing(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    set_user_state(message.from_user.id, STATE_TEST_MODEL_TYPE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_test_model_kb()
    )


@router.message(lambda message: message.text == '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ö–µ–º—É –ë–î')
async def start_schema_upload(message: Message):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã –ë–î"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    set_user_state(message.from_user.id, STATE_SCHEMA_UPLOAD)
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å—Ö–µ–º–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (DDL statements).\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å SQL-–∫–æ–º–∞–Ω–¥—ã CREATE TABLE –∏ –¥—Ä—É–≥–∏–µ DDL-–∫–æ–º–∞–Ω–¥—ã.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª:"
    )


@router.message(
    lambda message: message.text == '–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å' and get_user_state(message.from_user.id) == STATE_TEST_MODEL_TYPE)
async def choose_base_model_for_test(message: Message):
    """–í—ã–±–æ—Ä –±–∞–∑–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    set_user_state(message.from_user.id, STATE_TEST_BASE_MODEL_CHOICE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_base_model_kb()
    )


@router.message(lambda message: message.text == '–î–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å' and get_user_state(
    message.from_user.id) == STATE_TEST_MODEL_TYPE)
async def choose_finetuned_model_for_test(message: Message):
    """–í—ã–±–æ—Ä –¥–æ–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    finetuned_models = get_finetuned_models()
    if not finetuned_models:
        await message.answer(
            "–î–æ–æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å.",
            reply_markup=get_main_kb()
        )
        set_user_state(message.from_user.id, STATE_MAIN)
        return

    set_user_state(message.from_user.id, STATE_TEST_FINETUNED_MODEL_CHOICE)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_finetuned_model_kb()
    )


@router.message(lambda message: message.text in BASE_MODELS and get_user_state(
    message.from_user.id) == STATE_TEST_BASE_MODEL_CHOICE)
async def base_model_chosen_for_test(message: Message):
    """–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞ huggingface repo
    hf_map = {
        'CodeLlama-7b-Instruct-hf': 'codellama/CodeLlama-7b-Instruct-hf',
        'Mistral-7B-Instruct-v0.2': 'mistralai/Mistral-7B-Instruct-v0.2',
    }
    model_path = hf_map.get(message.text, message.text)

    set_user_state(message.from_user.id, STATE_TEST_UPLOAD_DATASET,
                   model_path=model_path, model_type='base')
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å: {message.text}\n\n"
        "–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx).\n\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:\n"
        "- bad_sql: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å\n"
        "- good_sql: –æ–∂–∏–¥–∞–µ–º—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å\n"
        "- reason: –ø—Ä–∏—á–∏–Ω–∞ –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π\n"
        "- fix: –æ–∂–∏–¥–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞:"
    )


@router.message(lambda message: get_user_state(message.from_user.id) == STATE_TEST_FINETUNED_MODEL_CHOICE)
async def finetuned_model_chosen_for_test(message: Message):
    """–î–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not message.from_user or not message.text:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –º–æ–¥–µ–ª—å.")
        return

    finetuned_models = get_finetuned_models()
    if message.text not in finetuned_models:
        await message.answer(
            "–í—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:",
            reply_markup=get_finetuned_model_kb()
        )
        return

    set_user_state(message.from_user.id, STATE_TEST_UPLOAD_DATASET,
                   model_path=message.text, model_type='finetuned')
    await message.answer(
        f"–í—ã–±—Ä–∞–Ω–∞ –¥–æ–æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å: {message.text}\n\n"
        "–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx).\n\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã:\n"
        "- bad_sql: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å\n"
        "- good_sql: –æ–∂–∏–¥–∞–µ–º—ã–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π SQL-–∑–∞–ø—Ä–æ—Å\n"
        "- fix: –æ–∂–∏–¥–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞:"
    )


@router.message(lambda message: message.document is not None)
async def handle_file(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    if not message.from_user or not message.document:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª.")
        return

    user_id = message.from_user.id
    state = get_user_state(user_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    file_info = await bot.get_file(message.document.file_id)
    file_path = f"{user_id}_{message.document.file_name}"

    if not file_info.file_path:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
        return

    await bot.download_file(file_info.file_path, file_path)

    if state == STATE_TRAIN_UPLOAD_DATASET:
        # –î–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω
        set_user_state(user_id, STATE_TRAIN_MODEL_CHOICE, dataset_path=file_path)
        await message.answer(
            "–§–∞–π–ª –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è:",
            reply_markup=get_finetune_model_kb()
        )

    elif state == STATE_TEST_UPLOAD_DATASET:
        # –¢–µ—Å—Ç–æ–≤—ã–π –¥–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
        model_path = get_user_data(user_id, 'model_path')
        model_type = get_user_data(user_id, 'model_type')

        await message.answer("–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")

        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            result_path = await loop.run_in_executor(
                None,
                lambda: test_model(file_path, model_path, model_type)
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            with open(result_path, 'rb') as f:
                await message.answer_document(
                    FSInputFile(result_path),
                    caption=f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {model_path}"
                )

            await message.answer(
                "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª–µ.",
                reply_markup=get_main_kb()
            )

        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")

        set_user_state(user_id, STATE_MAIN)

    elif state == STATE_SCHEMA_UPLOAD:
        # –°—Ö–µ–º–∞ –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω–∞
        set_user_state(user_id, STATE_MAIN, schema_path=file_path)
        await message.answer(
            "–§–∞–π–ª —Å—Ö–µ–º—ã –ë–î —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!",
            reply_markup=get_main_kb()
        )


@router.message(lambda message: message.text in HF_FINETUNE_MODELS and get_user_state(
    message.from_user.id) == STATE_TRAIN_MODEL_CHOICE)
async def handle_finetune_model_choice(message: Message):
    """–í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = message.from_user.id
    set_user_state(user_id, STATE_TRAIN_QUANT_CHOICE, model_name=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è:", reply_markup=get_quant_kb())


@router.message(lambda message: message.text in ['4bit', '8bit', 'fp16'] and get_user_state(
    message.from_user.id) == STATE_TRAIN_QUANT_CHOICE)
async def handle_finetune_quant_choice(message: Message):
    """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è –∏ –∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è"""
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_id = message.from_user.id
    quant = message.text
    dataset_path = get_user_data(user_id, 'dataset_path')
    model_name = get_user_data(user_id, 'model_name')

    if not dataset_path or not model_name:
        await message.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.")
        set_user_state(user_id, STATE_MAIN)
        return

    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞ huggingface repo
    hf_map = {
        'CodeLlama-7b-Instruct-hf': 'codellama/CodeLlama-7b-Instruct-hf',
        'Mistral-7B-Instruct-v0.2': 'mistralai/Mistral-7B-Instruct-v0.2',
    }
    base_model = hf_map.get(model_name, model_name)
    output_dir = f"finetuned_{user_id}_{model_name}_{quant}"

    await message.answer(
        f"–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ {model_name} —Å –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ–º {quant}.\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏..."
    )

    loop = asyncio.get_event_loop()
    try:
        await loop.run_in_executor(
            None,
            lambda: train_bnb_lora(
                dataset_path,
                base_model=base_model,
                output_dir=output_dir,
                quantization_type=quant
            )
        )
        await message.answer(
            f"–î–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! LoRA-–∞–¥–∞–ø—Ç–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ø–∞–ø–∫–µ {output_dir}",
            reply_markup=get_main_kb()
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏: {str(e)}")

    set_user_state(user_id, STATE_MAIN)


@router.message()
async def handle_other_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—á–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not message.from_user:
        return

    state = get_user_state(message.from_user.id)

    if state == STATE_MAIN:
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=get_main_kb()
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–º–æ—â—å—é /start")


async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())